swagger: "2.0"
info:
  description: "This is a Reindexer."
  version: "1.0.0"
  title: "Reindexer server"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "databases"
  description: "Databases managment"
- name: "namespaces"
  description: "Namespaces managment"
- name: "items"
  description: "Documents managment"
- name: "indexes"
  description: "Indexes management"
- name: "queries"
  description: "Queries to reindexer (dsl/sql)"
- name: "system"
  description: "Get system information"
schemes:
- "http"
paths:
  /check:
    get:
      tags:
      - "system"
      summary: "Get system information"
      description: ""
      operationId: "getSysInfo"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SysInfo"
        400:
          description: "Invalid arguments supplied"
  /db:
    post:
      tags:
      - "databases"
      summary: "Create a database"
      description: ""
      operationId: "createDatabase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Database definintion"
        required: true
        schema:
          $ref: "#/definitions/Database"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameters"
    get:
      tags:
      - "databases"
      summary: "Databases list description"
      description: ""
      operationId: "describeDatabases"
      produces:
      - "application/json"
      parameters:
      - name: "sort_order"
        in: "query"
        type: "string"
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Databases"
        400:
          description: "Invalid arguments supplied"

  /db/{database}:
      delete:
        tags:
        - "databases"
        summary: "Drop database"
        description: ""
        operationId: "dropDatabase"
        produces:
        - "application/json"
        parameters:
        - name: "database"
          in: "path"
          type: "string"
          description: "Database name"
          required: true
        responses:
          200:
            description: "successful operation"
          400:
            description: "Invalid arguments supplied"

  /db/{database}/namespaces:
    post:
      tags:
      - "namespaces"
      summary: "Open or create namespace"
      description: ""
      operationId: "openNamespace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Namespace definintion"
        required: true
        schema:
          $ref: "#/definitions/Namespace"
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameters"
    get:
      tags:
      - "namespaces"
      summary: "Namespaces list description"
      description: ""
      operationId: "describeNamespaces"
      produces:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "sort_order"
        in: "query"
        type: "string"
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Namespaces"
        400:
          description: "Invalid arguments supplied"

  /db/{database}/namespaces/{name}:
      get:
        tags:
        - "namespaces"
        summary: "Current namespace description"
        description: ""
        operationId: "describeCurrNamespace"
        produces:
        - "application/json"
        parameters:
        - name: "database"
          in: "path"
          type: "string"
          description: "Database name"
          required: true
        - name: "name"
          in: "path"
          type: "string"
          description: "Namespace name"
          required: true
        responses:
          200:
            description: "successful operation"
            schema:
              $ref: "#/definitions/Namespace"
          400:
            description: "Invalid arguments supplied"
      delete:
        tags:
        - "namespaces"
        summary: "Drop namespace"
        description: ""
        operationId: "dropNamespace"
        produces:
        - "application/json"
        parameters:
        - name: "database"
          in: "path"
          type: "string"
          description: "Database name"
          required: true
        - name: "name"
          in: "path"
          type: "string"
          description: "Namespace name"
          required: true
        responses:
          200:
            description: "successful operation"
          400:
            description: "Invalid arguments supplied"

  /db/{database}/namespaces/{name}/items:
    delete:
      tags:
      - "items"
      summary: "Delete documents from namespace"
      operationId: "deleteItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "items"
      summary: "Insert documents to namespace"
      operationId: "postItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "items"
      summary: "Update documents in namespace"
      operationId: "putItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Items'
        400:
          description: "Invalid status value"
    get:
      tags:
      - "items"
      summary: "Items list description"
      description: ""
      operationId: "getItems"
      produces:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      - name: "limit"
        in: "query"
        type: "integer"
        description: "Maximum count of returned items"
      - name: "offset"
        in: "query"
        type: "integer"
        description: "Offset of first returned item"
      - name: "sort_field"
        in: "query"
        type: "string"
        description: "Sort Field"
      - name: "sort_order"
        in: "query"
        type: "string"
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      - name: "filter"
        in: "query"
        type: "string"
        description: "Filter with SQL syntax, e.g: field1 = 'v1' AND field2 > 'v2'"
      - name: "fields"
        in: "query"
        type: "string"
        description: "Comma-separated list of returned fields"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Items'
        400:
          description: "Invalid arguments supplied"

  /db/{database}/namespaces/{name}/indexes:
    get:
      tags:
      - "indexes"
      summary: "Indexes list description"
      description: ""
      operationId: "describeIndexes"
      produces:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Indexes"
        400:
          description: "Invalid arguments supplied"
    post:
      tags:
      - "indexes"
      summary: "Insert index to namespace"
      operationId: "postIndex"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Index definition"
        schema:
          $ref: "#/definitions/Index"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"

    put:
      tags:
      - "indexes"
      summary: "Update index in namespace"
      operationId: "putIndex"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Index definition"
        schema:
          $ref: "#/definitions/Index"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
  /db/{database}/namespaces/{name}/indexes/{indexname}:
    delete:
      tags:
      - "indexes"
      summary: "Delete index from namespace"
      operationId: "deleteIndex"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      - name: "indexname"
        in: "path"
        type: "string"
        description: "Index name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"

  /db/{database}/query:
    get:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "getQuery"
      produces:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "q"
        in: "query"
        type: "string"
        description: "SQL query"
        required: true
      - name: "limit"
        in: "query"
        type: "integer"
        description: "Maximum count of returned items"
      - name: "offset"
        in: "query"
        type: "integer"
        description: "Offset of first returned item"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          description: "Invalid status value"
    post:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "postQuery"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - in: "body"
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          description: "Invalid status value"
    delete:
      tags:
      - "queries"
      summary: "Delete documents from namespace"
      operationId: "deleteQuery"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - in: "body"
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          description: "Invalid status value"
  /db/{database}/sqlquery:
    post:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "postSQLQuery"
      produces:
      - "application/json"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "q"
        in: "body"
        schema:
          type: "string"
        description: "SQL query"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          description: "Invalid status value"

definitions:
  SysInfo:
    type: "object"
    properties:
      version:
        type: "string"
        description: "Server version"
      uptime:
        type: "integer"
        description: "Server uptime in seconds"
      start_time:
        type: "integer"
        description: "Server start time in unix timestamp"
      heap_size:
        type: "integer"
        description: "Current heap size in bytes"
      current_allocated_bytes:
        type: "integer"
        description: "Current inuse allocated memory size in bytes"
      pageheap_free:
        type: "integer"
        description: "Heap free size in bytes"
      pageheap_unmapped:
        type: "integer"
        description: "Unmapped free heap size in bytes"
  Databases:
    type: "object"
    properties:
      total_items:
         type: "integer"
      items:
         type: "array"
         items:
           type: "string"

  Database:
    type: "object"
    properties:
      name:
        type: "string"

  Namespaces:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            storage_enabled:
              type: "boolean"
      total_items:
        type: "integer"
        description: "Total count of namespaces"

  Namespace:
    type: "object"
    properties:
      name:
        type: "string"
      storage:
        type: "object"
        properties:
          enabled:
            type: "boolean"
      indexes:
        type: "array"
        items: 
          $ref: "#/definitions/Index"

  Index:
    type: "object"
    properties:
      name: 
        type: "string"
      json_paths:
        type: "array"
        items:
          type: "string"
      field_type:
        type: "string"
        description: "Field type"
        enum:
        - "int"
        - "int64"
        - "double"
        - "string"
        - "bool"
        - "composite"
      index_type:
        type: "string"
        description: "Index type"
        enum:
        - "hash"
        - "tree"
        - "text"
        - "-"
      is_pk:
        type: "boolean"
      is_array:
        type: "boolean"
        default: false
      is_dense:
        type: "boolean"
      is_sparse:
        type: "boolean"
      collate_mode:
        type: "string"
        description: "Collate mode"
        enum:
        - "none"
        - "ascii"
        - "utf8"
        - "numeric"
      sort_order_letters:
        type: "string"
        description: "Sort order letters"
      config:
        type: "object"
        description: "Index configuration (fulltext)"

  Query:
    type: "object"
    properties:
      namespace:
        type: "string"
      limit:
        type: "integer"
      offset:
        type: "integer"
      distinct:
        type: "string"
  
      req_total:
        type: "string"
        enum:
        - "disabled"
        - "enabled"
        - "cached"
      filters:
        type: "array"
        items: 
          $ref: "#/definitions/FilterDef"
      sort:
        type: "array"
        items:
          $ref: "#/definitions/SortDef"
      join_queries:
        type: "array"
        items:
          $ref: "#/definitions/JoinedDef"
      merge_queries:
        type: "array"
        items:
          $ref: "#/definitions/Query"
      select_filter:
        type: "array"
        items:
          type: "string"
      select_functions:
        type: "array"
        items:
          type: "string"
      aggregations:
        type: "array"
        items:
          $ref: "#/definitions/AggregationsDef"
      explain:
        type: "boolean"
        default: false

  FilterDef:
    type: "object"
    properties:
      field:
        type: "string"
      cond:
        type: "string"
        enum:
        - "EQ"
        - "GT"
        - "GE"
        - "LE"
        - "LT"
        - "RANGE"
        - "SET"
        - "EMPTY"
      op:
        type: "string"
        enum:
        - "AND"
        - "OR"
        - "NOT"
      value:
        type: "object"

  SortDef:
    type: "object"
    properties:
      field:
        type: "string"
      values:
        type: "array"
        items:
          type: "object"
      desc:
        type: "boolean"

  JoinedDef:
    type: "object"
    properties:
      namespace:
        type: "string"
      type:
        type: "string"
      op:
        type: "string"
        enum:
        - "AND"
        - "OR"
        - "NOT"
      filters:
        type: "array"
        items: 
          $ref: "#/definitions/FilterDef"
      sort:
        type: "object"
        $ref: "#/definitions/SortDef"
      limit:
        type: "integer"
      offset:
        type: "integer"
      on:
        type: "array"
        items: 
          $ref: "#/definitions/OnDef"


  OnDef:
    type: "object"
    properties:
      left_field:
        type: "string"
      right_field:
        type: "string"
      cond:
        type: "string"
        enum:
        - "EQ"
        - "GT"
        - "GE"
        - "LE"
        - "LT"
        - "RANGE"
        - "SET"
        - "EMPTY"
      op:
        type: "string"
        enum:
        - "AND"
        - "OR"
        - "NOT"

  AggregationsDef:
    type: "object"
    properties:
      field:
        type: "string"
      type:
        type: "string"
        enum:
        - "sum"
        - "avg"

  Items:
    type: "object"
    properties:
      total_items:
         type: "integer"
      items:
         type: "array"
         items:
           type: "object"
  QueryItems:
    type: "object"
    properties:
      query_total_items:
         type: "integer"
      explain:
         type: "object"
      items:
         type: "array"
         items:
           type: "object"

  Indexes:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Index"
      total_items:
        type: "integer"
        description: "Total count of namespaces"
