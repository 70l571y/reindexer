swagger: "2.0"
info:
  description: "This is a Reindexer."
  version: "1.0.0"
  title: "Reindexer server"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: ""
basePath: "/"
tags:
- name: "namespaces"
  description: "Namespaces managment (open/close/drop)"
- name: "items"
  description: "Documents managment (insert/update/delete)"
- name: "queries"
  description: "Queries to reindexer (dsl/sql)"
schemes:
- "http"
paths:
  /namespaces:
    post:
      tags:
      - "namespaces"
      summary: "Open or create namespace"
      description: ""
      operationId: "openNamespace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Namespace definintion"
        required: true
        schema:
          $ref: "#/definitions/Namespace"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameters"
    delete:
      tags:
      - "namespaces"
      summary: "Close or drop namespace"
      description: ""
      operationId: "closeNamespace"
      produces:
      - "application/json"
      parameters:
      - name: "ns"
        in: "query"
        type: "string"
        description: "Namespace name"
        required: true
      - name: "drop"
        in: "query"
        type: "integer"
        description: "0 - just close namespace, 1 - drop namespace from disk"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid arguments supplied"
    get:
      tags:
      - "namespaces"
      summary: "List namespaces description"
      description: ""
      operationId: "describeNamespaces"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid arguments supplied"

  /items:
    delete:
      tags:
      - "items"
      summary: "Delete documents from namespace"
      operationId: "deleteItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "ns"
        in: "query"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "items"
      summary: "Insert documents to namespace"
      operationId: "postItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "ns"
        in: "query"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "items"
      summary: "Update documents in namespace"
      operationId: "putItems"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "ns"
        in: "query"
        type: "string"
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Items'
        400:
          description: "Invalid status value"
  /query:
    get:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "getQuery"
      produces:
      - "application/json"
      parameters:
      - name: "q"
        in: "query"
        type: "string"
        description: "SQL query"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Items'
        400:
          description: "Invalid status value"
    post:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "postQuery"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"

definitions:
  Namespace:
    type: "object"
    properties:
      name:
        type: "string"
      storage:
        type: "object"
        properties:
          enabled: 
            type: "boolean"
          drop_on_indexes_conflict: 
            type: "boolean"
          drop_on_file_format_error: 
            type: "boolean"
          create_if_missing:
            type: "boolean"
      indexes:
        type: "array"
        items: 
          $ref: "#/definitions/IndexDef"
  IndexDef:
    type: "object"
    properties:
      name: 
        type: "string"
      json_path: 
        type: "string"
      is_pk: 
        type: "boolean"
      is_array: 
        type: "boolean"
      is_dense: 
        type: "boolean"
      field_type:
        type: "string"
        description: "Field type"
        enum:
        - "int"
        - "int64"
        - "double"
        - "string"
        - "bool"
        - "composite"
      index_type:
        type: "string"
        description: "Index type"
        enum:
        - "hash"
        - "tree"
        - "text"
        - "-"
  Query:
    type: "object"
    properties:
      namespace:
        type: "string"
      limit:
        type: "integer"
      offset:
        type: "integer"
      distinct:
        type: "string"
      filters:
        type: "array"
        items: 
          $ref: "#/definitions/FilterDef"
      sort:
        type: "object"
        $ref: "#/definitions/SortDef"
  FilterDef:
    type: "object"
    properties:
      field:
        type: "string"
      cond:
        type: "string"
        enum:
        - "EQ"
        - "GT"
        - "GE"
        - "LE"
        - "LT"
        - "RANGE"
        - "SET"
        - "EMPTY"
      op:
        type: "string"
        enum:
        - "AND"
        - "OR"
        - "NOT"
      value:
        type: "object"
  SortDef:
    type: "object"
    properties:
      field:
        type: "string"
      values:
        type: "object"
      desc:
        type: "boolean"

  Items:
    type: "object"
    properties:
      total_count:
         type: "integer"
      items:
         type: "array"
         items:
           type: "object"
